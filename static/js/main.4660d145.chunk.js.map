{"version":3,"sources":["components/titles.jsx","components/forms.jsx","components/weather.jsx","App.js","serviceWorker.js","index.js"],"names":["Titles","props","className","Form","onSubmit","loadWeather","htmlFor","name","type","id","placeholder","Weather","country","city","temperature","humidity","description","error","role","Api_Key","App","state","undefined","getWeather","e","a","target","elements","value","preventDefault","fetch","weatherAPI","json","response","cod","setState","main","temp","sys","weather","console","log","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kTAIeA,EAHA,SAAAC,GACb,OAAO,wBAAIC,UAAU,2BAAd,gBC2CMC,EA5CF,SAAAF,GACX,OACE,yBAAKC,UAAU,OACb,0BAAMA,UAAU,kBAAkBE,SAAUH,EAAMI,aAChD,yBAAKH,UAAU,cACb,2BAAOI,QAAQ,OAAOJ,UAAU,sCAAhC,QAGA,yBAAKA,UAAU,aACb,2BACEK,KAAK,OACLC,KAAK,OACLN,UAAU,eACVO,GAAG,OACHC,YAAY,WAIlB,yBAAKR,UAAU,cACb,2BACEI,QAAQ,UACRJ,UAAU,sCAFZ,WAMA,yBAAKA,UAAU,aACb,2BACEK,KAAK,UACLC,KAAK,OACLN,UAAU,eACVO,GAAG,UACHC,YAAY,cAIlB,yBAAKR,UAAU,cACb,yBAAKA,UAAU,6BACb,4BAAQA,UAAU,gBAAlB,oBCZGS,EAzBC,SAAAV,GACd,OACE,yBAAKC,UAAU,uBACb,yBAAKA,UAAU,YACdD,EAAMW,SAAWX,EAAMY,MACtB,wCACaZ,EAAMY,KADnB,KAC2BZ,EAAMW,SAGnC,yBAAKV,UAAU,YACdD,EAAMa,aAAe,2CAAiBb,EAAMa,aAC7C,yBAAKZ,UAAU,YACdD,EAAMc,UAAY,wCAAcd,EAAMc,UACvC,yBAAKb,UAAU,YACdD,EAAMe,aAAe,0CAAgBf,EAAMe,aAC5C,yBAAKd,UAAU,YAEdD,EAAMgB,OACL,yBAAKf,UAAU,qBAAqBgB,KAAK,SACvC,uBAAGhB,UAAU,cAAcD,EAAMgB,UCZrCE,G,kBAAU,oCA0EDC,E,2MAvEbC,MAAQ,CACNP,iBAAaQ,EACbT,UAAMS,EACNV,aAASU,EACTP,cAAUO,EACVN,iBAAaM,EACbL,WAAOK,G,EAITC,W,uCAAa,WAAOC,GAAP,qBAAAC,EAAA,6DAELZ,EAAOW,EAAEE,OAAOC,SAASd,KAAKe,MAC9BhB,EAAUY,EAAEE,OAAOC,SAASf,QAAQgB,MAC1CJ,EAAEK,iBAJS,SAOcC,MAAM,oDAAD,OAAqDjB,EAArD,YAA6DD,EAA7D,kBAA8EO,IAPjG,cAOLY,EAPK,gBASYA,EAAWC,OATvB,OASLC,EATK,OAUPpB,GAAQD,EACW,MAAjBqB,EAASC,IACX,EAAKC,SAAS,CACZrB,YAAamB,EAASG,KAAKC,KAC3BxB,KAAMoB,EAAS1B,KACfK,QAASqB,EAASK,IAAI1B,QACtBG,SAAUkB,EAASG,KAAKrB,SACxBC,YAAaiB,EAASM,QAAQ,GAAGvB,YACjCC,MAAO,KAIT,EAAKkB,SAAS,CACZrB,YAAa,GACbD,KAAM,GACND,QAAS,GACTG,SAAU,GACVC,YAAa,GACbC,MAAO,wEAMX,EAAKkB,SAAS,CACZlB,MAAO,6BAKXuB,QAAQC,IAAIR,GAxCD,4C,8HA4CX,OACE,yBAAK/B,UAAU,gCACb,yBAAKA,UAAU,8CACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMG,YAAaqC,KAAKnB,aACxB,kBAAC,EAAD,CAAST,YAAa4B,KAAKrB,MAAMP,YAC/BD,KAAM6B,KAAKrB,MAAMR,KACjBD,QAAS8B,KAAKrB,MAAMT,QACpBG,SAAU2B,KAAKrB,MAAMN,SACrBC,YAAa0B,KAAKrB,MAAML,YACxBC,MAAOyB,KAAKrB,MAAMJ,c,GAlEZ0B,IAAMC,WCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4660d145.chunk.js","sourcesContent":["import React from \"react\";\r\nconst Titles = props => {\r\n  return <h3 className=\"color-white text-center\">Weather App</h3>;\r\n};\r\nexport default Titles;\r\n","import React from \"react\";\r\nconst Form = props => {\r\n  return (\r\n    <div className=\"row\">\r\n      <form className=\"form-horizontal\" onSubmit={props.loadWeather}>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"city\" className=\"col-sm-2 control-label color-white\">\r\n            City\r\n          </label>\r\n          <div className=\"col-sm-10\">\r\n            <input\r\n              name=\"city\"\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"city\"\r\n              placeholder=\"City\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label\r\n            htmlFor=\"country\"\r\n            className=\"col-sm-2 control-label color-white\"\r\n          >\r\n            Country\r\n          </label>\r\n          <div className=\"col-sm-10\">\r\n            <input\r\n              name=\"country\"\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"country\"\r\n              placeholder=\"Country\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <div className=\"col-sm-offset-2 col-sm-10\">\r\n            <button className=\"btn btn-info\">Get Weather</button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\nexport default Form;\r\n","import React from \"react\";\r\nconst Weather = props => {\r\n  return (\r\n    <div className=\"row weather-details\">\r\n      <div className=\"divider\"></div>\r\n      {props.country && props.city && (\r\n        <p>\r\n          Location: {props.city}, {props.country}\r\n        </p>\r\n      )}\r\n      <div className=\"divider\"></div>\r\n      {props.temperature && <p>Temperature: {props.temperature}</p>}\r\n      <div className=\"divider\"></div>\r\n      {props.humidity && <p>Humidity: {props.humidity}</p>}\r\n      <div className=\"divider\"></div>\r\n      {props.description && <p>Conditions: {props.description}</p>}\r\n      <div className=\"divider\"></div>\r\n\r\n      {props.error && (\r\n        <div className=\"alert alert-danger\" role=\"alert\">\r\n          <p className=\"alert-link\">{props.error}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default Weather;\r\n","import React, { Component } from 'react';\nimport Titles from './components/titles';\nimport Form from './components/forms';\nimport Weather from './components/weather';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { async } from 'q';\n\nconst Api_Key = \"1cf45c746782ad52d1f7aeafe8bc7204\";\nclass App extends React.Component {\n\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n\n\n  getWeather = async (e) => {\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    e.preventDefault();\n\n\n    const weatherAPI = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${Api_Key}`);\n\n    const response = await weatherAPI.json();\n    if (city && country) {\n      if (response.cod === 200) {\n        this.setState({\n          temperature: response.main.temp,\n          city: response.name,\n          country: response.sys.country,\n          humidity: response.main.humidity,\n          description: response.weather[0].description,\n          error: \"\"\n        })\n      }\n      else {\n        this.setState({\n          temperature: \"\",\n          city: \"\",\n          country: \"\",\n          humidity: \"\",\n          description: \"\",\n          error: \"Sorry we could not find the results for mentioned city and country!\"\n        })\n      }\n    }\n\n    else {\n      this.setState({\n        error: \"Please enter the values!\"\n      })\n    }\n\n\n    console.log(response);\n  }\n\n  render() {\n    return (\n      <div className=\"container-fluid container-bg\">\n        <div className=\"col-xs-6 col-xs-offset-3 weather-container\">\n          <Titles />\n          <Form loadWeather={this.getWeather} />\n          <Weather temperature={this.state.temperature}\n            city={this.state.city}\n            country={this.state.country}\n            humidity={this.state.humidity}\n            description={this.state.description}\n            error={this.state.error} />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}